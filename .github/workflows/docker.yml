name: üê≥ Docker CI/CD

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request_target:
    paths:
      - "app/**"
      - "public/**"
      - "test/**"
      - ".dockerignore"
      - "bun.lock"
      - "Dockerfile"
      - "package.json"
      - "*config.*"
  push:
    branches: main
    paths:
      - "app/**"
      - "public/**"
      - "test/**"
      - ".dockerignore"
      - "bun.lock"
      - "Dockerfile"
      - "package.json"
      - "*config.*"
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      no-cache:
        description: "Build docker images with no cache"
        default: false
        required: false
        type: boolean
      push:
        description: 'Push docker image to registry'
        default: false
        required: false
        type: boolean

permissions:
  attestations: write
  contents: read
  id-token: write
  packages: write
  pull-requests: write

env:
  REPOSITORY: marukome0743/caravan-kidstec
  GHCR_REGISTRY: ghcr.io
  GHCR_REPOSITORY: openup-labtakizawa/caravan-kidstec
  SHA: ${{ github.event.pull_request.head.sha || github.sha }}
  IS_PUSH: ${{ github.event_name == 'push' || inputs.push == true }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.repository_owner == 'openup-labtakizawa'

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.SHA }}

      - name: üê¶‚Äç‚¨õ Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392

      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@18ce135bb5112fa8ce4ed6c17ab05699d7f3a5e0

      - name: üêã Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: üö¢ Login to GitHub Container Registry
        if: fromJSON(env.IS_PUSH)
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚ÑπÔ∏è Docker Meta
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
        with:
          images: |
            name=${{ env.REPOSITORY }}
            name=${{ env.GHCR_REGISTRY }}/${{ env.GHCR_REPOSITORY }},enable=${{ fromJSON(env.IS_PUSH) }}
          labels: org.opencontainers.image.revision=${{ env.SHA }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=ref,event=pr,prefix=pr-
            type=raw,value=canary,enable=${{ github.event_name != 'pull_request_target' }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: ${{ fromJSON(env.IS_PUSH) && 'manifest,index' || 'manifest' }}

      - name: üöÄ Build and Push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        id: push
        with:
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          load: ${{ !fromJSON(env.IS_PUSH) }}
          no-cache: ${{ inputs.no-cache == true }}
          platforms: ${{ fromJSON(env.IS_PUSH) && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
          provenance: ${{ fromJSON(env.IS_PUSH) && 'mode=max' }}
          push: ${{ fromJSON(env.IS_PUSH) }}
          sbom: ${{ fromJSON(env.IS_PUSH) }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: ü™™ Attest
        if: fromJSON(env.IS_PUSH)
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be
        with:
          subject-name: ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_REPOSITORY }}
          subject-digest: ${{ steps.push.outputs.digest }}

      - name: üîé Docker Scout
        if: github.event_name == 'pull_request_target'
        uses: docker/scout-action@aceeb83b88f2ae54376891227858dda7af647183
        with:
          command: compare
          image: ${{ steps.meta.outputs.tags }}
          to: ${{ env.REPOSITORY }}:canary
          only-severities: critical,high
