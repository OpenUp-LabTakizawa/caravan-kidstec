name: üöÄ Build and Deploy to AWS Lambda

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: main
    paths:
      - "@caravan-kidstec/web/**"
      - "bun.lock"
      - "package.json"
  workflow_dispatch:
    inputs:
      no-cache:
        description: "Build docker images with no cache"
        default: false
        required: false
        type: boolean

permissions:
  id-token: write

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: ${{ github.event.repository.name }}
  LAMBDA_FUNCTION_NAME: ${{ github.event.repository.name }}

jobs:
  lambda:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.repository_owner == 'openup-labtakizawa'

    steps:
    - name: ü™™ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: üå≥ Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076

    - name: üîñ Get an old ImageTag
      run: |
        echo "OLD_IMAGE_TAG=$(aws ecr list-images --repository-name $ECR_REPOSITORY \
        --query 'imageIds[0].imageTag' --output text)" >> $GITHUB_ENV

    - name: üê¶‚Äç‚¨õ Set up QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392

    - name: üõ†Ô∏è Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

    - name: üöÄ Build and Push
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
      with:
        cache-from: type=gha
        cache-to: type=gha,mode=max
        no-cache: ${{ inputs.no-cache == true }}
        platforms: linux/arm64
        provenance: false
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    - name: ü•© Update Lambda Function
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME \
        --architectures arm64 --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: üóëÔ∏è Delete an old Image
      run: |
        aws ecr batch-delete-image --repository-name $ECR_REPOSITORY \
        --image-ids imageTag=$OLD_IMAGE_TAG
